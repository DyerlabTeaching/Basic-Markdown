{
  "hash": "b55ec0a7e99ad4fb58c897aa698e87a6",
  "result": {
    "markdown": "---\ntitle: \"Markdown\"\nsubtitle: \"&nbsp;\"\nauthor: Rodney Dyer, PhD\nformat: \n  revealjs:\n    background-transition: fade\n    theme: default\n    logo: \"media/ces_logo.png\"\n    chalkboard: true\neditor: source\ntitle-slide-attributes: \n  data-background-image: \"media/contour.png\"\n  data-background-position: \"right\"\n  data-background-size: initial\n---\n\n\n\n## Mardown is Text\n\n![](media/qmd_raw.png)\n\n## Tranforming using Quarto\n\nTo turn the raw text you see in RStudio into a document, we are going to use Quarto, which you should have already seen in a previous presentation. \n\nIf not, see [this](https://github.com/dyerlabteaching/quarto) repository for more information.\n\n\n## Your Turn ü´µ\n\n- Open up RStudio on your computer.    \n- Create a Quarto Document that will be rendered as a Word Document.   \n- Render the document.  \n- Change to `format: html` in the YAML and render the document again.\n- Change the theme.  Add a line to the YAML that has `theme: sketchy`.\n- Go check-out the additional [themes](https://quarto.org/docs/output-formats/html-themes.html) and see if you can find a 'dark mode' and 'light mode' one that you like.\n\n&nbsp;\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_62fd51dc\" style=\"top:0;right:0;font-size:1em;\" data-warnwhen=\"0\">\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n# YAML {background-color=\"black\" background-image=\"media/contour.png\" background-size=\"initial\" background-position=\"right\"}\n\n\n\n## YAML\n\nYAML (**Y**et **A**nother **M**arkdown **L**anguage) is a method of setting meta-data relevant to the parsing and rendering of a markdown document. \n \n:::{.incremental}\n- It **must** be at the top of the document.  \n\n- It is *delimited* by three dashes, one set above and one below the content.\n\n- Can be set for all files in a project (see file `_quarto.yml` in this repository) to standardize meta data for all instances of a document type (e.g., all PDF's have this them, all DOCX have a TOC, etc.).\n:::\n\n\n## YAML Singleton Grammar\n\nThe way that YAML works is a simple key:value setup.  For these cases, all items are on a single line, like you did previously to change the output from docx to html by changing: \n\n`format: docx` \n\nto \n\n`format: html`  \n\nThe colon is REQUIRED.\n\n## YAML as Compound Stuff\n\nSometimes we have nested YAML.  For example, maybe when I make a PDF I do not want a table of contents but when I create an html document I do.  Instead of reformatting and rewriting all of this, I can include both PDF and HTML YAML.\n\nTo do this, you use tabs to nest items underneath the general section **and** add a colon to the end of each line that has some kind of nested object.\n\n:::{.fragment .fade-in}\n```\nformat:\n  html:\n    toc: true\n  pdf:\n    toc: false\n```\n:::\n\n## YAML with Several Options\n\nAnd sometimes, we have a lot of options under a single *key* in YAML.  For example, if we have several authors on a paper, we can include them as itemized entries.\n\n```\nauthor:\n  - name: YOUR NAME\n  - name: OTHER PERSON\n```\n\n## Your Turn ü´µ\n\nTry the following and see how it renders.\n\n1. Open the quarto html document from before and add an option for the author by inserting `author: YOUR NAME HERE` into the YAML (n.b., you must replace `YOUR NAME HERE` with your actual name...)  \n2. Add three authors to the paper and render it.\n3. Go check out the [quarto documentation](https://quarto.org/docs/journals/authors.html) on authors and affiliations and make an affiliation for each of the three authors.\n\n\n&nbsp;\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_62fd5414\" style=\"top:0;right:0;font-size:1em;\" data-warnwhen=\"0\">\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n# Markdown Rationalle {background-color=\"black\" background-image=\"media/contour.png\" background-size=\"initial\" background-position=\"right\"}\n\n\n## Markdown Defines Typography\n\nOne of the challenges to producing several kinds of documents (e.g., HTML, DocX, PDF, Dashboard, etc.) from a single source is that the common WYSIWYG editors have you specify the physical appearance of elements.\n\n::: {.incremental}\n- The font, color, and size of Headings.  \n- How to format titles and legends for tables and figures.\n- How to number figures and tables.\n- What is the base font.\n- What is the page size.\n- How do I get this image to not jump to the next f*%$ing page!!!\n:::\n\n## Separation of Content from Display\n\nWhat *Markdown* lets you\n\n- Identify the components of the text that have special meaning, and then\n\n- Defer decisions about styles, colors, fonts, etc. until render time.\n\n:::{.fragment .fade-in}\nIn this presentation, the slide title is actually a level 2 heading and is shown on the slide as a **<font size=\"25em\">bold and larger</font>** font face.  However, if I rendered this as a single HTML page, it may be <font color=\"orange\" size=\"18em\">Orange</font> but if it goes to a PowerPoint, I want it to fit into my color them and be <font color=\"red\" size=\"32em\" style=\"font-family: Monospace;\"><b>Red, bold, and Monospace</b></font>.\n:::\n\n## Separation Leads to Simplicity\n\n&nbsp;\n\n::::{.columns}\n\n:::{.column width=\"50%\"}\n:::{.fragment .fade-in}\n### üëé Never \n\nWaste your time working on display characteristics *before* the actual text of what you are producing is finished.  \n\nYour time is just too valuable.\n:::\n:::\n\n:::{.column width=\"50%\"}\n:::{ .fragment .fade-in}\n### Instead üëç \n\nWaste your time working on the actual content of the work you are doing.  \n\nThe display will come later (reformatting bibliographies, changing journal formats, etc.)\n:::\n:::\n\n::::\n\n## Separation Deferrs Internal Connections\n\nSeparating also allows you to generalize things like:\n\n- References to figures and table and \n- Bibliographies\n\n:::{.fragment .fade-in}\nWhat chaos is created by inserting a new figure in between Figure 3 and Figure 4 in your thesis written in Word?\n:::\n\n## Separation Leads to Dynamic Documents\n\nThe use of Markdown mixed with `R` (or python or julia) means that we can:\n\n:::{.incremental}\n1. Specify a table or figure in code \n2. When rendered the actual figure of table is produced with the data.\n3. Allows dynamic documents/reports to be created\n4. Forms **tight** connection between the data, analyses, and associated textual descriptions\n:::\n\n## Separation Leads to In-Text Content\n\nStop typing analyses and data output directly, have Markdown insert results when rendered.\n\n:::{.incremental}\n- U `R` code *within* the text itself.\n- When the document is rendered, it will execute the code an put in the results.\n- Changes to data, analyses, df, test statistics, etc. are all *automagically* updated\n:::\n\n\n## Markdown is Text\n\nFinally, since Markdown is just text:\n\n:::{.incremental}\n- Allows the use of GitHub for repositories & collaboration, \n- *Never* becomes lost because you cannot find a copy of some program that is no longer supported, \n- Is always readable on all platforms at all times.\n:::\n\n# Markdown Syntax {background-color=\"black\" background-image=\"media/contour.png\" background-size=\"initial\" background-position=\"right\"}\n\n\n\n## Simple Typographic Components\n\nMarkdown is a method to typeset *text* using only keyboard commands.  \n\nPlain text is displayed as body styled texts.  \n\nWhat you type is what you get.\n\n\n## Titles, Sections, and Headings\n\nIn your word processor, you have Titles, Subtitles, Header 1, Header 2, Header 3, etc.\n\n::::{.columns}\n\n:::{.column width=\"50%\"}\n![](media/styles.png)\n:::\n\n\n:::{.column width=\"50%}\n:::{.fragment .fade-in}\nIn Markdown, we indicate these elements by prepending a hashtag to the text.\n:::\n:::\n\n::::\n\n\n## Titles, Sections, and Headings\n\nThe more hashtags, the less prominent the header level.\n\n![](media/headings.png){fig-align=\"center\"}\n\n\n## Simple Typographic Markup\n\nThe most common features of text are also \"marked them up\" using the following conventions.\n\n&nbsp;\n\nMarkdown              | Result   \n----------------------|-------------  \n\\*italic\\*            |  *italic*  \n\\*\\*bold\\*\\*          |  **bold**   \n\\~\\~strikethrough\\~\\~ | ~~strikethrough~~\n\n\n\n## Itemized & Numeric Lists\n\n![](media/lists.png){fig-align=\"center\"}\n\n\n## Image & Links\n\nURL's can be used to include both to webpages and images (either online or as a path relative to the document you are making on the computer).  \n\n\n\n| Markdown                          | Rendered As                         |\n|-----------------------------------|-------------------------------------|\n| \\[CES\\](https://ces.vcu.edu)      | [CES](https://ces.vcu.edu)          |\n| !\\[alt text\\](media/goat.jpg) | ![alt text](media/goat.jpg) |\n\n\n:::{.fragment .fade-in}\nAdditional figure configurations are described [here](https://quarto.org/docs/authoring/figures.html).\n:::\n\n<!-- https://rstudio-conf-2022.github.io/get-started-quarto/materials/01-intro-quarto.html#/anatomy-of-a-quarto-document  -->\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"slides_files/libs/countdown-0.3.5/countdown.css\" rel=\"stylesheet\" />\n<script src=\"slides_files/libs/countdown-0.3.5/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}